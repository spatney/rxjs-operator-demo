import { BufferDemo } from "./operators/buffering/buffer";
import { BufferCountDemo } from "./operators/buffering/bufferCount";
import { BufferTimeDemo } from "./operators/buffering/bufferTime";
import { BufferToggleDemo } from "./operators/buffering/bufferToggle";
import { BufferWhenDemo } from "./operators/buffering/bufferWhen";
import { WindowDemo } from "./operators/buffering/window";
import { WindowCountDemo } from "./operators/buffering/windowCount";
import { WindowTimeDemo } from "./operators/buffering/windowTime";
import { WindowToggleDemo } from "./operators/buffering/windowToggle";
import { WindowWhenDemo } from "./operators/buffering/windowWhen";
import { CatchErrorDemo } from "./operators/error-handling/catchError";
import { ThrowIfEmptyDemo } from "./operators/error-handling/throwIfEmpty";
import { OnErrorResumeNextDemo } from "./operators/error-handling/onErrorResumeNext";
import { RetryDemo } from "./operators/error-handling/retry";
import { RetryWhenDemo } from "./operators/error-handling/retryWhen";
import { TimeoutDemo } from "./operators/error-handling/timeout";
import { TimeoutWithDemo } from "./operators/error-handling/timeoutWith";
import { SkipDemo } from "./operators/filtering-to-multiple/skip";
import { SkipLastDemo } from "./operators/filtering-to-multiple/skipLast";
import { SkipUntilDemo } from "./operators/filtering-to-multiple/skipUntil";
import { SkipWhileDemo } from "./operators/filtering-to-multiple/skipWhile";
import { TakeDemo } from "./operators/filtering-to-multiple/take";
import { TakeLastDemo } from "./operators/filtering-to-multiple/takeLast";
import { TakeUntilDemo } from "./operators/filtering-to-multiple/takeUntil";
import { TakeWhileDemo } from "./operators/filtering-to-multiple/takeWhile";
import { DistinctDemo } from "./operators/filtering-to-multiple/distinct";
import { DistinctUntilKeyChangedDemo } from "./operators/filtering-to-multiple/distinctUntilKeyChanged";
import { FilterDemo } from "./operators/filtering-to-multiple/filter";
import { SampleDemo } from "./operators/filtering-to-multiple/sample";
import { AuditDemo } from "./operators/filtering-to-multiple/audit";
import { ThrottleDemo } from "./operators/filtering-to-multiple/throttle";
import { FirstDemo } from "./operators/filtering-to-one/first";
import { LastDemo } from "./operators/filtering-to-one/last";
import { MinDemo } from "./operators/filtering-to-one/min";
import { MaxDemo } from "./operators/filtering-to-one/max";
import { ElementAtDemo } from "./operators/filtering-to-one/elementAt";
import { FindDemo } from "./operators/filtering-to-one/find";
import { FindIndexDemo } from "./operators/filtering-to-one/findIndex";
import { SingleDemo } from "./operators/filtering-to-one/single";
import { CombineAllDemo } from "./operators/grouping-observables/combineAll";
import { ConcatAllDemo } from "./operators/grouping-observables/concatAll";
import { ExhaustDemo } from "./operators/grouping-observables/exhaust";
import { MergeAllDemo } from "./operators/grouping-observables/mergeAll";
import { WithLatestFromDemo } from "./operators/grouping-observables/withLastestFrom";
import { GroupByDemo } from "./operators/grouping-values/groupBy";
import { PairwiseDemo } from "./operators/grouping-values/pairwise";
import { PartitionDemo } from "./operators/grouping-values/partition";
import { SwitchAllDemo } from "./operators/grouping-values/switchAll";
import { ToArrayDemo } from "./operators/grouping-values/toArray";
import { ZipAllDemo } from "./operators/grouping-values/zipAll";
import { RepeatDemo } from "./operators/observable transformation/repeat";
import { RepeatWhenDemo } from "./operators/observable transformation/repeatWhen";
import { IgnoreElementsDemo } from "./operators/observable transformation/ignoreElements";
import { FinalizeDemo } from "./operators/observable transformation/finalize";
import { AuditTimeDemo } from "./operators/time, duration & scheduled/auditTime";
import { SampleTimeDemo } from "./operators/time, duration & scheduled/sampleTime";
import { ObserveOnDemo } from "./operators/time, duration & scheduled/observeOn";
import { SubscribeOnDemo } from "./operators/time, duration & scheduled/subscribeOn";

//BufferDemo();
//BufferCountDemo();
//BufferTimeDemo();
//BufferToggleDemo();
//BufferWhenDemo();
//WindowDemo();
//WindowCountDemo();
//WindowTimeDemo();
//WindowToggleDemo();
//WindowWhenDemo();
//CatchErrorDemo();
//ThrowIfEmptyDemo();
//OnErrorResumeNextDemo();
//RetryDemo();
//RetryWhenDemo();
//TimeoutDemo();
//TimeoutWithDemo();
//SkipDemo();
//SkipLastDemo();
//SkipUntilDemo();
//SkipWhileDemo();
//TakeDemo();
//TakeLastDemo();
//TakeUntilDemo();
//TakeWhileDemo();
//DistinctDemo();
//DistinctUntilChangedDemo();
//DistinctUntilKeyChangedDemo();
//FilterDemo();
//SampleDemo();
//AuditDemo();
//ThrottleDemo();
//FirstDemo();
//LastDemo();
//MinDemo();
//MaxDemo();
//ElementAtDemo();
//FindDemo();
//FindIndexDemo();
//SingleDemo();
//CombineAllDemo();
//ConcatAllDemo();
//ExhaustDemo();
//MergeAllDemo();
//WithLatestFromDemo();
//GroupByDemo();
//PairwiseDemo();
//PartitionDemo();
//SwitchAllDemo();
//ToArrayDemo();
//ZipAllDemo();
//RepeatDemo();
//RepeatWhenDemo();
//IgnoreElementsDemo();
//FinalizeDemo();
//AuditTimeDemo();
//SampleTimeDemo();
//ObserveOnDemo();
SubscribeOnDemo();